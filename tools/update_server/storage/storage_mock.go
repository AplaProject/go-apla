// Code generated by mockery v1.0.0
package storage

import mock "github.com/stretchr/testify/mock"
import model "github.com/AplaProject/go-apla/tools/update_server/model"

// MockEngine is an autogenerated mock type for the Engine type
type MockEngine struct {
	mock.Mock
}

// Add provides a mock function with given fields: binary
func (_m *MockEngine) Add(binary model.Build) error {
	ret := _m.Called(binary)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Build) error); ok {
		r0 = rf(binary)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: binary
func (_m *MockEngine) Delete(binary model.Build) error {
	ret := _m.Called(binary)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Build) error); ok {
		r0 = rf(binary)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: binary
func (_m *MockEngine) Get(binary model.Build) (model.Build, error) {
	ret := _m.Called(binary)

	var r0 model.Build
	if rf, ok := ret.Get(0).(func(model.Build) model.Build); ok {
		r0 = rf(binary)
	} else {
		r0 = ret.Get(0).(model.Build)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.Build) error); ok {
		r1 = rf(binary)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVersionsList provides a mock function with given fields:
func (_m *MockEngine) GetVersionsList() ([]model.Version, error) {
	ret := _m.Called()

	var r0 []model.Version
	if rf, ok := ret.Get(0).(func() []model.Version); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Version)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
