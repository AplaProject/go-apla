//line parser.y:2

// Copyright (c) 2014 The lex Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// WARNING: If this file is parser.go then DO NOT EDIT.
// parser.go is generated by goyacc from parser.y (see the Makefile).

package lex

import __yyfmt__ "fmt"

//line parser.y:10
import (
	"fmt"
	"strings"

	"go/token"
)

var (
	defNamePos0 token.Position
)

//line parser.y:29
type yySymType struct {
	yys  int
	str  string
	strs []string
}

const tSECTION_DIV = 57346
const tBLANKS = 57347
const tVERBATIM_OPEN = 57348
const tVERBATIM_CLOSE = 57349
const tSTARTS = 57350
const tSSTART = 57351
const tXSTART = 57352
const tYYT = 57353
const tYYB = 57354
const tYYC = 57355
const tYYN = 57356
const tYYM = 57357
const tOPTION = 57358
const tDEF_NAME = 57359
const tDEFINITION = 57360
const tUNINDENTED_COMMENT = 57361
const tINDENTED_TEXT = 57362
const tVERBATIM_LINE = 57363
const tPATTERN_LINE = 57364
const tUSER_CODE_LINE = 57365
const tNAME = 57366
const tSTARTS_PATTERN_LINE = 57367

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"tSECTION_DIV",
	"tBLANKS",
	"tVERBATIM_OPEN",
	"tVERBATIM_CLOSE",
	"tSTARTS",
	"tSSTART",
	"tXSTART",
	"tYYT",
	"tYYB",
	"tYYC",
	"tYYN",
	"tYYM",
	"tOPTION",
	"tDEF_NAME",
	"tDEFINITION",
	"tUNINDENTED_COMMENT",
	"tINDENTED_TEXT",
	"tVERBATIM_LINE",
	"tPATTERN_LINE",
	"tUSER_CODE_LINE",
	"tNAME",
	"tSTARTS_PATTERN_LINE",
	"'\\n'",
	"'>'",
	"','",
	"'*'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:328

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyNprod = 49
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 70

var yyAct = [...]int{

	41, 6, 39, 11, 63, 64, 12, 13, 14, 15,
	16, 17, 18, 19, 8, 57, 9, 10, 66, 36,
	58, 38, 65, 7, 42, 69, 68, 60, 53, 46,
	45, 62, 50, 35, 54, 37, 26, 49, 52, 34,
	40, 43, 4, 67, 48, 51, 51, 47, 55, 33,
	44, 21, 28, 29, 30, 31, 3, 25, 24, 23,
	59, 22, 5, 61, 27, 20, 2, 1, 56, 32,
}
var yyPact = [...]int{

	-1000, -1000, 38, -3, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 13, 35, -1000, 36, 36, -1000, 35, -1000, -1000,
	-1000, -1000, 6, -1000, -1000, -1000, -1000, -1000, -1000, 19,
	-1000, 25, 33, 4, 33, 16, -1000, -1000, -9, -1000,
	-1000, -1000, 3, -1000, -1000, 24, -23, -1000, -1000, -4,
	-1000, -8, -1000, -1000, 2, -1000, -1000, 0, -1000, -1000,
}
var yyPgo = [...]int{

	0, 0, 69, 36, 24, 68, 67, 66, 65, 2,
	64, 63, 62, 61, 60, 59, 58, 57, 56, 51,
	49, 47, 44, 43,
}
var yyR1 = [...]int{

	0, 6, 8, 6, 9, 9, 10, 11, 3, 12,
	13, 14, 12, 12, 12, 15, 12, 16, 12, 17,
	12, 12, 12, 12, 12, 12, 12, 18, 18, 7,
	20, 20, 21, 20, 20, 22, 23, 20, 19, 19,
	4, 4, 5, 5, 5, 2, 2, 1, 1,
}
var yyR2 = [...]int{

	0, 1, 0, 4, 0, 1, 0, 0, 5, 1,
	0, 0, 6, 1, 1, 0, 4, 0, 3, 0,
	3, 2, 2, 2, 2, 2, 1, 0, 2, 3,
	1, 1, 0, 4, 1, 0, 0, 6, 0, 2,
	2, 3, 1, 3, 1, 0, 2, 0, 2,
}
var yyChk = [...]int{

	-1000, -6, -7, -18, 4, -12, 4, 26, 17, 19,
	20, 6, 9, 10, 11, 12, 13, 14, 15, 16,
	-8, -19, -13, -15, -16, -17, -3, -10, -3, -3,
	-3, -3, -2, -20, 26, 20, 6, 22, 8, -9,
	5, -1, -4, 5, -4, -9, 23, -21, -22, 18,
	7, 21, 5, 24, 18, -1, -5, 24, 29, -14,
	24, -11, 7, 27, 28, 26, 26, -23, 24, 25,
}
var yyDef = [...]int{

	27, -2, 1, 0, 2, 28, 38, 9, 10, 13,
	14, 15, 17, 19, 6, 6, 6, 6, 6, 26,
	45, 29, 4, 47, 0, 0, 21, 4, 22, 23,
	24, 25, 3, 39, 30, 31, 32, 34, 35, 0,
	5, 0, 18, 0, 20, 0, 46, 47, 0, 11,
	16, 48, 0, 40, 7, 0, 0, 42, 44, 0,
	41, 0, 33, 36, 0, 12, 8, 0, 43, 37,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	26, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 29, 3, 28, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 27,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:81
		{
			sc(yylex).Begin(_USER)
		}
	case 3:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:85
		{
			usrCode = yyDollar[4].str
		}
	case 6:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:95
		{
			sc(yylex).PushState(_DEF_NAME)
		}
	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:100
		{
			sc(yylex).PopState()
		}
	case 8:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:104
		{
			yyVAL.str = yyDollar[3].str
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:111
		{
			defNamePos0 = sc(yylex).TokenStart()
			sc(yylex).PushState(_DEF_NAME)
		}
	case 11:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:117
		{
			if _, ok := defs[yyDollar[1].str]; ok {
				logErr(fmt.Sprintf("%s:%q redefined", defNamePos0, yyDollar[1].str))
			}

			defs[yyDollar[1].str] = yyDollar[4].str
			defPos[yyDollar[1].str] = sc(yylex).TokenStart()
			sc(yylex).PopState()
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:128
		{
			defCode = append(defCode, yyDollar[1].str+"\n")
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:132
		{
			defCode = append(defCode, yyDollar[1].str+"\n")
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:136
		{
			sc(yylex).PushState(_VERBATIM)
		}
	case 16:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:141
		{
			defCode = append(defCode, yyDollar[3].str+"\n")
			sc(yylex).PopState()
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:146
		{
			sc(yylex).PushState(_DEF_STARTS)
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:150
		{
			sStarts = append(sStarts, yyDollar[3].strs...)
			sc(yylex).PopState()
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:155
		{
			sc(yylex).PushState(_DEF_STARTS)
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:159
		{
			xStarts = append(xStarts, yyDollar[3].strs...)
			for _, start := range yyDollar[3].strs {
				isXStart[start] = true
			}
			sc(yylex).PopState()
		}
	case 21:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:168
		{
			_yyt = yyDollar[2].str
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:173
		{
			_yyb = yyDollar[2].str
		}
	case 23:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:178
		{
			_yyc = yyDollar[2].str
		}
	case 24:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:183
		{
			_yyn = yyDollar[2].str
		}
	case 25:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:188
		{
			_yym = yyDollar[2].str
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:192
		{
			switch s := strings.TrimSpace(yyDollar[1].str[len("%option"):]); s {
			case "case-insensitive":
				caseless = true
			default:
				logErr(fmt.Sprintf("%s: unknown %%option %q", sc(yylex).TokenStart(), s))
			}
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:210
		{
			for s := range unrefStarts {
				logErr(fmt.Sprintf("%s:start condition %q declared and not used", sc(yylex).TokenStart(), s))
			}
			if len(rules) == 1 {
				logErr(fmt.Sprintf("%s:no rules defined", sc(yylex).TokenStart()))
			}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:223
		{
			moreAction(yyDollar[1].str)
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:227
		{
			sc(yylex).PushState(_VERBATIM)
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:232
		{
			moreAction(yyDollar[3].str)
			sc(yylex).PopState()
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:237
		{
			rulePos = append(rulePos, sc(yylex).TokenStart())
			pat, re, action, bol, eol := parsePattern(sc(yylex).TokenStart(), yyDollar[1].str, map[string]bool{})
			unreachableRules[len(rules)] = true
			rules = append(rules, rule{nil, pat, re, action, nil, nil, bol, eol})
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:244
		{
			sc(yylex).PushState(_STARTS)
		}
	case 36:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:249
		{
			sc(yylex).PopState()
		}
	case 37:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:253
		{
			rulePos = append(rulePos, sc(yylex).TokenStart())
			pat, re, action, bol, eol := parsePattern(sc(yylex).TokenStart(), yyDollar[6].str, map[string]bool{})
			unreachableRules[len(rules)] = true
			rules = append(rules, rule{yyDollar[3].strs, pat, re, action, nil, nil, bol, eol})
		}
	case 38:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:262
		{
			sc(yylex).PushState(_RULES)
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:270
		{
			if !addStartSet(yyDollar[2].str) {
				logErr(fmt.Sprintf("%s:start condition %q redeclared", sc(yylex).TokenStart(), yyDollar[2].str))
			}
			yyVAL.strs = append(yyVAL.strs, yyDollar[2].str)
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:277
		{
			if !addStartSet(yyDollar[3].str) {
				logErr(fmt.Sprintf("%s:start condition %q redeclared", sc(yylex).TokenStart(), yyDollar[3].str))
			}
			yyVAL.strs = append(yyVAL.strs, yyDollar[3].str)
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:287
		{
			if _, ok := defStarts[yyDollar[1].str]; !ok {
				logErr(fmt.Sprintf("%s:start condition %q undefined", sc(yylex).TokenStart(), yyDollar[1].str))
			}
			delete(unrefStarts, yyDollar[1].str)
			yyVAL.strs = append(yyVAL.strs, yyDollar[1].str)
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:295
		{
			if _, ok := defStarts[yyDollar[3].str]; !ok {
				logErr(fmt.Sprintf("%s:start condition %q undefined", sc(yylex).TokenStart(), yyDollar[3].str))
			}
			delete(unrefStarts, yyDollar[3].str)
			yyVAL.strs = append(yyVAL.strs, yyDollar[3].str)
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:303
		{
			yyVAL.strs = append(yyVAL.strs, "*")
		}
	case 45:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:309
		{
			yyVAL.str = ""
		}
	case 46:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:313
		{
			yyVAL.str += yyDollar[2].str
		}
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:319
		{
			yyVAL.str = ""
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:323
		{
			yyVAL.str += yyDollar[2].str
		}
	}
	goto yystack /* stack new state and value */
}
