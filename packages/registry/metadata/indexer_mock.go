// Code generated by mockery v1.0.0
package metadata

import kv "github.com/AplaProject/go-apla/packages/storage/kv"
import mock "github.com/stretchr/testify/mock"
import types "github.com/AplaProject/go-apla/packages/types"

// mockRegistryIndexer is an autogenerated mock type for the registryIndexer type
type mockRegistryIndexer struct {
	mock.Mock
}

// addPrimaryValue provides a mock function with given fields: tx, value
func (_m *mockRegistryIndexer) addPrimaryValue(tx kv.Transaction, value string) error {
	ret := _m.Called(tx, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(kv.Transaction, string) error); ok {
		r0 = rf(tx, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// formatIndexName provides a mock function with given fields: reg, field
func (_m *mockRegistryIndexer) formatIndexName(reg *types.Registry, field string) string {
	ret := _m.Called(reg, field)

	var r0 string
	if rf, ok := ret.Get(0).(func(*types.Registry, string) string); ok {
		r0 = rf(reg, field)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// getIndexes provides a mock function with given fields: reg
func (_m *mockRegistryIndexer) getIndexes(reg *types.Registry) []types.Index {
	ret := _m.Called(reg)

	var r0 []types.Index
	if rf, ok := ret.Get(0).(func(*types.Registry) []types.Index); ok {
		r0 = rf(reg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Index)
		}
	}

	return r0
}

// init provides a mock function with given fields: tx
func (_m *mockRegistryIndexer) init(tx kv.Transaction) error {
	ret := _m.Called(tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(kv.Transaction) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// removePrimaryValue provides a mock function with given fields: tx, value
func (_m *mockRegistryIndexer) removePrimaryValue(tx kv.Transaction, value string) error {
	ret := _m.Called(tx, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(kv.Transaction, string) error); ok {
		r0 = rf(tx, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
