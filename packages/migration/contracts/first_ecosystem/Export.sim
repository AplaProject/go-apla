// +prop AppID = 1
// +prop Conditions = 'ContractConditions("MainCondition")'
contract Export {
    data {}

    func escapeSpecials(s string) string {
        s = Replace(s, `\`, `\\`)
        s = Replace(s, `	`, `\t`)
        s = Replace(s, "\n", `\n`)
        s = Replace(s, "\r", `\r`)
        s = Replace(s, `"`, `\"`)
        if s == "0"{
            s = ""
        }
        return s
    }

    func AssignAll(app_name string, resources string) string {
        return Sprintf(`{
            "name": "%v",
            "data": [
                %v
            ]
        }`, app_name, resources)
    }

    func serializeItem(item map, type string) string {
        var s string
        s = Sprintf(
            `{
                "Type": "%v",
                "Name": "%v",
                "Value": "%v",
                "Conditions": "%v",
                "Menu": "%v",
                "Title": "%v",
                "Trans": "%v",
                "Columns": "%v",
                "Permissions": "%v"
            }`, type, escapeSpecials(Str(item["name"])), escapeSpecials(Str(item["value"])), escapeSpecials(Str(item["conditions"])), escapeSpecials(Str(item["menu"])), escapeSpecials(Str(item["title"])), escapeSpecials(Str(item["res"])), escapeSpecials(Str(item["columns"])), escapeSpecials(Str(item["permissions"]))
        )
        return s
    }

    func getTypeForColumns(table_name string, columnsJSON string) string {
        var colsMap map, result columns array
        colsMap = JSONDecode(columnsJSON)
        columns = GetMapKeys(colsMap)
        var i int
        while i < Len(columns){
            if Size(columns[i]) > 0 {
                var col map
                col["name"] = columns[i]
                col["conditions"] = colsMap[col["name"]]
                col["type"] = GetColumnType(table_name, col["name"])
                result = Append(result, col)
            }
            i = i + 1
        }
        return JSONEncode(result)
    }

    func exportTable(type string, result array) array {
        var items array, limit offset int
        limit = 250
        while true{
            var rows array, where string
            if type == "menu" {
                if Len($menus_names) > 0 {
                    where = Sprintf("name in (%v)", Join($menus_names, ","))
                }
            }else{
                where = Sprintf("app_id=%v", $ApplicationID)
            }
            if where {
                rows = DBFind(type).Limit(limit).Offset(offset).Where(where)
            }
            if Len(rows) > 0{
                var i int
                while i<Len(rows){
                    items = Append(items, rows[i])
                    i=i+1
                }
            }else{
                break
            }
            offset = offset+limit
        }
        var i int, item map
        while i < Len(items) {
            item = items[i]
            if type == "tables" {
                var table map
                table["name"] = item["name"]
                table["permissions"] = item["permissions"]
                table["conditions"] = item["conditions"]
                table["columns"] = getTypeForColumns(item["name"], item["columns"])
                item = table
            }
            result = Append(result, serializeItem(item, type))
            if type == "pages" {
                $menus_names = Append($menus_names, Sprintf("'%v'", item["menu"]))
            }
            i = i + 1
        }
        return result
    }

    conditions {
        var buffer_map map
        buffer_map = DBFind("buffer_data").Columns("id,value->app_id,value->app_name").Where("member_id=$ and key=$", $key_id, "export").Row()
        if !buffer_map{
            warning "Application not found"
        }
        $ApplicationID = Int(buffer_map["value.app_id"])
        $ApplicationName = Str(buffer_map["value.app_name"])

        var menus_names array
        $menus_names = menus_names
    }

    action {
        var exportJSON string, items array
        items = exportTable("pages", items)
        items = exportTable("contracts", items)
        items = exportTable("blocks", items)
        items = exportTable("languages", items)
        items = exportTable("app_params", items)
        items = exportTable("tables", items)
        items = exportTable("menu", items)

        exportJSON = AssignAll($ApplicationName, Join(items, ",\r\n"))
        UploadBinary("Name,Data,ApplicationId,DataMimeType", "export", exportJSON, 1, "application/json")
    }
}