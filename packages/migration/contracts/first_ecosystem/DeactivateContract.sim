// +prop AppID = 1
// +prop Conditions = 'ContractConditions("MainCondition")'
contract DeactivateContract {
	data {
		Id         int
	}
	conditions {
		$cur = DBRow("contracts").Columns("id,conditions,active,wallet_id").WhereId($Id)
		if !$cur {
			error Sprintf("Contract %d does not exist", $Id)
		}
		if Int($cur["active"]) == 0 {
			error Sprintf("The contract %d has been already deactivated", $Id)
		}
		Eval($cur["conditions"])
		if $key_id != Int($cur["wallet_id"]) {
			error Sprintf("Wallet %d cannot deactivate the contract", $key_id)
		}
	}
	action {
		DBUpdate("contracts", $Id, {"active": 0})
		Deactivate($Id, $ecosystem_id)
	}
	func rollback() {
		Activate($Id, $ecosystem_id)
	}
}