// Code generated by go generate; DO NOT EDIT.

package vde

var contractsDataSQL = `
INSERT INTO "1_contracts" (id, name, value, conditions, app_id, ecosystem)
VALUES
	(next_id('1_contracts'), 'EditCron', 'contract EditCron {
		data {
			Id         int
			Contract   string
			Cron       string "optional"
			Limit      int "optional"
			Till       string "optional date"
			Conditions string
		}
		conditions {
			ConditionById("cron", true)
			ValidateCron($Cron)
		}
		action {
			if !$Till {
				$Till = "1970-01-01 00:00:00"
			}
			if !HasPrefix($Contract, "@") {
				$Contract = "@" + Str($ecosystem_id) + $Contract
			}
			DBUpdate("cron", $Id, {"cron": $Cron,"contract": $Contract,
			    "counter":$Limit, "till": $Till, "conditions":$Conditions})
			UpdateCron($Id)
		}
	}
', 'ContractConditions("MainCondition")', 1, '%[1]d'),
	(next_id('1_contracts'), 'ListVDE', 'contract ListVDE {
		data {}
	
		conditions {}
	
		action {
			$result = GetVDEList()
		}
	}
', 'ContractConditions("MainCondition")', 1, '%[1]d'),
	(next_id('1_contracts'), 'MainCondition', 'contract MainCondition {
		conditions {
		  if EcosysParam("founder_account")!=$key_id
		  {
			warning "Sorry, you do not have access to this action."
		  }
		}
	  }
', 'ContractConditions("MainCondition")', 1, '%[1]d'),
	(next_id('1_contracts'), 'NewCron', 'contract NewCron {
		data {
			Cron       string
			Contract   string
			Limit      int "optional"
			Till       string "optional date"
			Conditions string
		}
		conditions {
			ValidateCondition($Conditions,$ecosystem_id)
			ValidateCron($Cron)
		}
		action {
			if !$Till {
				$Till = "1970-01-01 00:00:00"
			}
			if !HasPrefix($Contract, "@") {
				$Contract = "@" + Str($ecosystem_id) + $Contract
			}
			$result = DBInsert("cron", {owner: $key_id,cron:$Cron,contract: $Contract,
				counter:$Limit, till: $Till,conditions: $Conditions})
			UpdateCron($result)
		}
	}
', 'ContractConditions("MainCondition")', 1, '%[1]d'),
	(next_id('1_contracts'), 'NewVDE', 'contract NewVDE {
		data {
			VDEName string
			DBUser string
			DBPassword string
			VDEAPIPort int
		}
	
		conditions {
            if Size($VDEName) == 0 {
                warning "VDEName was not received"
            }
            if Contains($VDEName, " ") {
                error "VDEName can not contain spaces"
            }
            if Size($DBUser) == 0 {
                warning "DBUser was not received"
            }
            if Size($DBPassword) == 0 {
                warning "DBPassword was not received"
            }
            if $VDEAPIPort <= 0  {
                warning "VDE API PORT not received"
            }
            
		}
	
		action {
            $VDEName = ToLower($VDEName)
            $DBUser = ToLower($DBUser)
            CreateVDE($VDEName, $DBUser, $DBPassword, $VDEAPIPort)
            $result = "VDE " + $VDEName + " created"
		}
}
', 'ContractConditions("MainCondition")', 1, '%[1]d'),
	(next_id('%[1]d_contracts'), 'NodeOwnerCondition', 'contract NodeOwnerCondition {
	conditions {
        $raw_full_nodes = SysParamString("full_nodes")
        if Size($raw_full_nodes) == 0 {
            ContractConditions("MainCondition")
        } else {
            $full_nodes = JSONDecode($raw_full_nodes)
            var i int
            while i < Len($full_nodes) {
                $fn = $full_nodes[i]
                if $fn["key_id"] == $key_id {
                    return true
                }
                i = i + 1
            }
            warning "Sorry, you do not have access to this action."
        }
	}
', 'ContractConditions("MainCondition")', 1, '%[1]d'),
	(next_id('1_contracts'), 'RemoveVDE', 'contract RemoveVDE {
		data {
			VDEName string
	}
	conditions {}
	action{
        $VDEName = ToLower($VDEName)
        DeleteVDE($VDEName)
        $result = "VDE " + $VDEName + " removed"
	}
}
', 'ContractConditions("MainCondition")', 1, '%[1]d'),
	(next_id('1_contracts'), 'RunVDE', 'contract RunVDE {
		data {
			VDEName string
		}
	
		conditions {
		}
	
		action {
            $VDEName = ToLower($VDEName)
            StartVDE($VDEName)
            $result = "VDE " + $VDEName + " running"
		}
	}
', 'ContractConditions("MainCondition")', 1, '%[1]d'),
	(next_id('1_contracts'), 'StopVDE', 'contract StopVDE {
		data {
			VDEName string
		}
	
		conditions {
		}
	
		action {
            $VDEName = ToLower($VDEName)
            StopVDEProcess($VDEName)
            $result = "VDE " + $VDEName + " stopped"
		}
}
', 'ContractConditions("MainCondition")', 1),
	(next_id('%[1]d_contracts'), 'UpdateMetrics', 'contract UpdateMetrics {
	conditions {
		ContractConditions("MainCondition")
	}
	action {
		var values array
		values = DBCollectMetrics()

		var i, id int
		var v map
		while (i < Len(values)) {
            var inmap map

            v = values[i]
            inmap["time"] = v["time"]
            inmap["key"] = v["key"]
            inmap["metric"] = v["metric"]
            
            id = Int(DBFind("metrics").Columns("id").Where(inmap).One("id"))
            var ival int
			if id != 0 {
                ival = Int(v["value"])
				DBUpdate("metrics", id, {"value": ival})
			} else {
                inmap["value"] = Int(v["value"])
				DBInsert("metrics", inmap )
			}
			i = i + 1
		}
	}
', 'ContractConditions("MainCondition")', 1, '%[1]d');
`
