// Code generated by mockery v1.0.0
package kv

import mock "github.com/stretchr/testify/mock"
import types "github.com/GenesisKernel/go-genesis/packages/types"

// MockTransaction is an autogenerated mock type for the Transaction type
type MockTransaction struct {
	mock.Mock
}

// AddIndex provides a mock function with given fields: indexes
func (_m *MockTransaction) AddIndex(indexes ...types.Index) error {
	_va := make([]interface{}, len(indexes))
	for _i := range indexes {
		_va[_i] = indexes[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...types.Index) error); ok {
		r0 = rf(indexes...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Ascend provides a mock function with given fields: index, iterator
func (_m *MockTransaction) Ascend(index string, iterator func(string, string) bool) error {
	ret := _m.Called(index, iterator)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, func(string, string) bool) error); ok {
		r0 = rf(index, iterator)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Commit provides a mock function with given fields:
func (_m *MockTransaction) Commit() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: key
func (_m *MockTransaction) Delete(key string) error {
	ret := _m.Called(key)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: key
func (_m *MockTransaction) Get(key string) (string, error) {
	ret := _m.Called(key)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Rollback provides a mock function with given fields:
func (_m *MockTransaction) Rollback() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Set provides a mock function with given fields: key, val
func (_m *MockTransaction) Set(key string, val string) error {
	ret := _m.Called(key, val)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(key, val)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: key, val
func (_m *MockTransaction) Update(key string, val string) (string, error) {
	ret := _m.Called(key, val)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(key, val)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(key, val)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
