// Code generated by mockery v1.0.0
package kv

import buntdb "github.com/tidwall/buntdb"
import mock "github.com/stretchr/testify/mock"

// MockTransaction is an autogenerated mock type for the Transaction type
type MockTransaction struct {
	mock.Mock
}

// AscendKeys provides a mock function with given fields: pattern, iterator
func (_m *MockTransaction) AscendKeys(pattern string, iterator func(string, string) bool) error {
	ret := _m.Called(pattern, iterator)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, func(string, string) bool) error); ok {
		r0 = rf(pattern, iterator)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Commit provides a mock function with given fields:
func (_m *MockTransaction) Commit() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: key
func (_m *MockTransaction) Delete(key string) (string, error) {
	ret := _m.Called(key)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: key, ignoreExpired
func (_m *MockTransaction) Get(key string, ignoreExpired ...bool) (string, error) {
	_va := make([]interface{}, len(ignoreExpired))
	for _i := range ignoreExpired {
		_va[_i] = ignoreExpired[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, ...bool) string); ok {
		r0 = rf(key, ignoreExpired...)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...bool) error); ok {
		r1 = rf(key, ignoreExpired...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Rollback provides a mock function with given fields:
func (_m *MockTransaction) Rollback() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Set provides a mock function with given fields: key, value, opts
func (_m *MockTransaction) Set(key string, value string, opts *buntdb.SetOptions) (string, bool, error) {
	ret := _m.Called(key, value, opts)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, *buntdb.SetOptions) string); ok {
		r0 = rf(key, value, opts)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string, string, *buntdb.SetOptions) bool); ok {
		r1 = rf(key, value, opts)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string, *buntdb.SetOptions) error); ok {
		r2 = rf(key, value, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
