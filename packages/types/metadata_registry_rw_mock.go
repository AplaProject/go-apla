// Code generated by mockery v1.0.0
package types

import mock "github.com/stretchr/testify/mock"

// MockMetadataRegistryReaderWriter is an autogenerated mock type for the MetadataRegistryReaderWriter type
type MockMetadataRegistryReaderWriter struct {
	mock.Mock
}

// Commit provides a mock function with given fields:
func (_m *MockMetadataRegistryReaderWriter) Commit() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateFromParams provides a mock function with given fields: name, params
func (_m *MockMetadataRegistryReaderWriter) CreateFromParams(name string, params map[string]interface{}) (RegistryModel, error) {
	ret := _m.Called(name, params)

	var r0 RegistryModel
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) RegistryModel); ok {
		r0 = rf(name, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(RegistryModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, map[string]interface{}) error); ok {
		r1 = rf(name, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: registry, pkValue, out
func (_m *MockMetadataRegistryReaderWriter) Get(registry *Registry, pkValue string, out interface{}) error {
	ret := _m.Called(registry, pkValue, out)

	var r0 error
	if rf, ok := ret.Get(0).(func(*Registry, string, interface{}) error); ok {
		r0 = rf(registry, pkValue, out)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetModel provides a mock function with given fields: registry, pkValue
func (_m *MockMetadataRegistryReaderWriter) Get2(registry *Registry, pkValue string) (RegistryModel, error) {
	ret := _m.Called(registry, pkValue)

	var r0 RegistryModel
	if rf, ok := ret.Get(0).(func(*Registry, string) RegistryModel); ok {
		r0 = rf(registry, pkValue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(RegistryModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*Registry, string) error); ok {
		r1 = rf(registry, pkValue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, registry, pkValue, value
func (_m *MockMetadataRegistryReaderWriter) Insert(ctx BlockchainContext, registry *Registry, pkValue string, value interface{}) error {
	ret := _m.Called(ctx, registry, pkValue, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(BlockchainContext, *Registry, string, interface{}) error); ok {
		r0 = rf(ctx, registry, pkValue, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Price provides a mock function with given fields:
func (_m *MockMetadataRegistryReaderWriter) Price() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Rollback provides a mock function with given fields:
func (_m *MockMetadataRegistryReaderWriter) Rollback() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, registry, pkValue, newValue
func (_m *MockMetadataRegistryReaderWriter) Update(ctx BlockchainContext, registry *Registry, pkValue string, newValue interface{}) error {
	ret := _m.Called(ctx, registry, pkValue, newValue)

	var r0 error
	if rf, ok := ret.Get(0).(func(BlockchainContext, *Registry, string, interface{}) error); ok {
		r0 = rf(ctx, registry, pkValue, newValue)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateFromParams provides a mock function with given fields: name, value, params
func (_m *MockMetadataRegistryReaderWriter) UpdateFromParams(name string, value interface{}, params map[string]interface{}) error {
	ret := _m.Called(name, value, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}, map[string]interface{}) error); ok {
		r0 = rf(name, value, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Walk provides a mock function with given fields: registry, field, fn
func (_m *MockMetadataRegistryReaderWriter) Walk(registry *Registry, field string, fn func(string) bool) error {
	ret := _m.Called(registry, field, fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(*Registry, string, func(string) bool) error); ok {
		r0 = rf(registry, field, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
