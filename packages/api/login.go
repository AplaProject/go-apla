// Copyright 2016 The go-daylight Authors
// This file is part of the go-daylight library.
//
// The go-daylight library is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// The go-daylight library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with the go-daylight library. If not, see <http://www.gnu.org/licenses/>.

package api

import (
	"encoding/hex"
	"encoding/json"
	"fmt"
	"net/http"
	"strconv"
	"time"

	"github.com/GenesisKernel/go-genesis/packages/conf"
	"github.com/GenesisKernel/go-genesis/packages/consts"
	"github.com/GenesisKernel/go-genesis/packages/converter"
	"github.com/GenesisKernel/go-genesis/packages/crypto"
	"github.com/GenesisKernel/go-genesis/packages/model"
	"github.com/GenesisKernel/go-genesis/packages/notificator"
	"github.com/GenesisKernel/go-genesis/packages/publisher"
	jwt "github.com/dgrijalva/jwt-go"

	log "github.com/sirupsen/logrus"
)

// Special word used by frontend to sign UID generated by /getuid API command, sign is performed for contcatenated word and UID
const nonceSalt = "LOGIN"

type loginForm struct {
	Form
	EcosystemID int64    `schema:"ecosystem"`
	Expire      int64    `schema:"expire"`
	PublicKey   hexValue `schema:"pubkey"`
	KeyID       int64    `schema:"key_id"`
	Signature   hexValue `schema:"signature"`
	RoleID      int64    `schema:"role_id"`
	IsMobile    bool     `schema:"mobile"`
}

type loginResult struct {
	Token       string       `json:"token,omitempty"`
	Refresh     string       `json:"refresh,omitempty"`
	EcosystemID string       `json:"ecosystem_id,omitempty"`
	KeyID       string       `json:"key_id,omitempty"`
	Address     string       `json:"address,omitempty"`
	NotifyKey   string       `json:"notify_key,omitempty"`
	IsNode      bool         `json:"isnode,omitempty"`
	IsOwner     bool         `json:"isowner,omitempty"`
	IsVDE       bool         `json:"vde,omitempty"`
	Timestamp   string       `json:"timestamp,omitempty"`
	Roles       []roleResult `json:"roles,omitempty"`
}

type roleResult struct {
	RoleId   int64  `json:"role_id"`
	RoleName string `json:"role_name"`
}

func loginHandler(w http.ResponseWriter, r *http.Request) {
	var (
		ok        bool
		uid       string
		publicKey []byte
		wallet    int64
		err       error
		form      = &loginForm{}
	)

	if ok := ParseForm(w, r, form); !ok {
		return
	}

	if uid, ok = getUID(w, r); !ok {
		return
	}

	client := getClient(r)
	logger := getLogger(r)

	if form.EcosystemID > 0 {
		client.EcosystemID = form.EcosystemID
	} else if client.EcosystemID == 0 {
		logger.WithFields(log.Fields{"type": consts.EmptyObject}).Warning("state is empty, using 1 as a state")
		client.EcosystemID = 1
	}

	publicKey = form.PublicKey.Value()
	if len(publicKey) == 0 {
		logger.WithFields(log.Fields{"type": consts.EmptyObject}).Error("public key is empty")
		errorResponse(w, errEmptyPublic, http.StatusBadRequest)
		return
	}
	wallet = crypto.Address(publicKey)

	account, ok := getAccount(w, r, client.EcosystemID, wallet)
	if !ok {
		return
	}

	if account == nil {
		contract := getContract(r, "NewUser")
		contract.CreateTx(hex.EncodeToString(publicKey))
	} else {
		publicKey = account.PublicKey
	}

	if client.RoleID == 0 && form.RoleID != 0 {
		checkedRole, err := checkRoleFromParam(form.RoleID, client.EcosystemID, wallet)
		if err != nil {
			errorResponse(w, errCheckRole, http.StatusInternalServerError)
			return
		}

		if checkedRole != form.RoleID {
			errorResponse(w, errCheckRole, http.StatusNotFound)
			return
		}

		client.RoleID = checkedRole
	}

	verify, err := crypto.CheckSign(publicKey, nonceSalt+uid, form.Signature.Value())
	if err != nil {
		logger.WithFields(log.Fields{"type": consts.CryptoError, "pubkey": publicKey, "uid": uid, "signature": form.Signature}).Error("checking signature")
		errorResponse(w, err, http.StatusBadRequest)
		return
	}
	if !verify {
		logger.WithFields(log.Fields{"type": consts.InvalidObject, "pubkey": publicKey, "uid": uid, "signature": form.Signature}).Error("incorrect signature")
		errorResponse(w, errSignature, http.StatusBadRequest)
		return
	}

	var founder int64
	if founder, ok = getFounder(w, r, client.EcosystemID); !ok {
		return
	}

	result := loginResult{
		EcosystemID: converter.Int64ToStr(client.EcosystemID),
		KeyID:       converter.Int64ToStr(wallet),
		Address:     crypto.KeyToAddress(publicKey),
		IsOwner:     founder == wallet,
		IsNode:      conf.Config.KeyID == wallet,
		IsVDE:       model.IsTable(fmt.Sprintf(`%d_vde_tables`, client.EcosystemID)),
	}

	expire := form.Expire
	if expire == 0 {
		logger.WithFields(log.Fields{"type": consts.JWTError, "expire": jwtExpire}).Warning("using expire from jwt")
		expire = jwtExpire
	}

	claims := JWTClaims{
		KeyID:       result.KeyID,
		EcosystemID: result.EcosystemID,
		IsMobile:    strconv.FormatBool(form.IsMobile),
		RoleID:      converter.Int64ToStr(client.RoleID),
		StandardClaims: jwt.StandardClaims{
			ExpiresAt: time.Now().Add(time.Second * time.Duration(expire)).Unix(),
		},
	}

	result.Token, err = generateJWTToken(claims)
	if err != nil {
		logger.WithFields(log.Fields{"type": consts.JWTError, "error": err}).Error("generating jwt token")
		errorResponse(w, err, http.StatusInternalServerError)
		return
	}
	claims.StandardClaims.ExpiresAt = time.Now().Add(time.Hour * 30 * 24).Unix()
	result.Refresh, err = generateJWTToken(claims)
	if err != nil {
		logger.WithFields(log.Fields{"type": consts.JWTError, "error": err}).Error("generating jwt token")
		errorResponse(w, err, http.StatusInternalServerError)
		return
	}
	result.NotifyKey, result.Timestamp, err = publisher.GetHMACSign(wallet)
	if err != nil {
		errorResponse(w, err, http.StatusInternalServerError)
		return
	}

	ra := &model.RolesParticipants{}
	roles, err := ra.SetTablePrefix(client.EcosystemID).GetActiveMemberRoles(wallet)
	if err != nil {
		log.WithFields(log.Fields{"type": consts.DBError, "error": err}).Error("getting roles")
		errorResponse(w, errServer, http.StatusBadRequest)
		return
	}

	for _, r := range roles {
		var res map[string]string
		if err := json.Unmarshal([]byte(r.Role), &res); err != nil {
			log.WithFields(log.Fields{"type": consts.JSONUnmarshallError, "error": err}).Error("unmarshalling role")
			errorResponse(w, errServer, http.StatusInternalServerError)
			return
		} else {
			result.Roles = append(result.Roles, roleResult{
				RoleId:   converter.StrToInt64(res["id"]),
				RoleName: res["name"],
			})
		}
	}
	notificator.AddUser(wallet, client.EcosystemID)
	notificator.UpdateNotifications(client.EcosystemID, []int64{wallet})

	jsonResponse(w, result)
}

func getUID(w http.ResponseWriter, r *http.Request) (string, bool) {
	var uid string

	token := getToken(r)
	if token != nil {
		if claims, ok := token.Claims.(*JWTClaims); ok {
			uid = claims.UID
		}
	} else if len(uid) == 0 {
		getLogger(r).WithFields(log.Fields{"type": consts.EmptyObject}).Error("UID is empty")
		errorResponse(w, errUnknownUID, http.StatusBadRequest)
		return "", false
	}

	return uid, true
}

func getAccount(w http.ResponseWriter, r *http.Request, ecosystemID, keyID int64) (*model.Key, bool) {
	account := &model.Key{}
	account.SetTablePrefix(ecosystemID)
	found, err := account.Get(keyID)
	if err != nil {
		logger := getLogger(r)
		logger.WithFields(log.Fields{"type": consts.DBError, "error": err}).Error("selecting record from keys")
		errorResponse(w, err, http.StatusBadRequest)
		return nil, false
	} else if found {
		if account.Deleted == 1 {
			errorResponse(w, errDeletedKey, http.StatusBadRequest)
			return nil, false
		}
	}
	return account, true
}

func checkRoleFromParam(role, ecosystemID, wallet int64) (int64, error) {
	if role > 0 {
		ok, err := model.MemberHasRole(nil, ecosystemID, wallet, role)
		if err != nil {
			log.WithFields(log.Fields{
				"type":      consts.DBError,
				"member":    wallet,
				"role":      role,
				"ecosystem": ecosystemID}).Error("check role")

			return 0, err
		}

		if !ok {
			log.WithFields(log.Fields{
				"type":      consts.NotFound,
				"member":    wallet,
				"role":      role,
				"ecosystem": ecosystemID,
			}).Error("member hasn't role")

			return 0, nil
		}
	}
	return role, nil
}

func getFounder(w http.ResponseWriter, r *http.Request, ecosystemID int64) (int64, bool) {
	var (
		sp      model.StateParameter
		founder int64
	)

	sp.SetTablePrefix(converter.Int64ToStr(ecosystemID))
	if ok, err := sp.Get(nil, "founder_account"); err != nil {
		getLogger(r).WithFields(log.Fields{"type": consts.DBError, "error": err}).Error("getting founder_account parameter")
		errorResponse(w, errServer, http.StatusBadRequest)
		return founder, false
	} else if ok {
		founder = converter.StrToInt64(sp.Value)
	}

	return founder, true
}
