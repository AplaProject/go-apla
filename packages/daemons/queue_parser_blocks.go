// Apla Software includes an integrated development
// environment with a multi-level system for the management
// of access rights to data, interfaces, and Smart contracts. The
// technical characteristics of the Apla Software are indicated in
// Apla Technical Paper.

// Apla Users are granted a permission to deal in the Apla
// Software without restrictions, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of Apla Software, and to permit persons
// to whom Apla Software is furnished to do so, subject to the
// following conditions:
// * the copyright notice of GenesisKernel and EGAAS S.A.
// and this permission notice shall be included in all copies or
// substantial portions of the software;
// * a result of the dealing in Apla Software cannot be
// implemented outside of the Apla Platform environment.

// THE APLA SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY
// OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
// TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE, ERROR FREE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
// THE USE OR OTHER DEALINGS IN THE APLA SOFTWARE.

package daemons

import (
	"context"

	"github.com/AplaProject/go-apla/packages/blockchain"
	"github.com/AplaProject/go-apla/packages/conf"
	"github.com/AplaProject/go-apla/packages/conf/syspar"
	"github.com/AplaProject/go-apla/packages/consts"
	"github.com/AplaProject/go-apla/packages/queue"
	"github.com/AplaProject/go-apla/packages/utils"

	log "github.com/sirupsen/logrus"
)

/* Take the block from the queue. If this block has the bigger block id than the last block from our chain, then find the fork
 * If fork begins less then variables->rollback_blocks blocks ago, than
 *  - get the whole chain of blocks
 *  - roll back data from our blocks
 *  - insert the frontal data from a new chain
 *  - if there is no error, then roll back our data from the blocks
 *  - and insert new data
 *  - if there are errors, then roll back to the former data
 * */

// QueueParserBlocks parses and applies blocks from the queue
func QueueParserBlocks(ctx context.Context, d *daemon) error {
	DBLock()
	defer DBUnlock()

	infoBlock, _, found, err := blockchain.GetLastBlock(nil)
	if err != nil {
		return err
	}
	if !found {
		return nil
	}
	return queue.ValidateBlockQueue.ProcessItems(func(qb *queue.QueueBlock) error {
		if qb.BlockID > infoBlock.Header.BlockID+syspar.GetRbBlocks1() {
			d.logger.WithFields(log.Fields{"type": consts.InvalidObject, "block_id": qb.BlockID}).Error("can't rollback to block")
			return nil
		}

		// is it old block in queue ?
		if qb.BlockID <= infoBlock.Header.BlockID {
			d.logger.WithFields(log.Fields{"type": consts.DuplicateObject, "block_id": qb.BlockID}).Error("queueBlock generated by myself")
			return nil
		}
		if qb.FullNodeID == conf.Config.KeyID {
			d.logger.WithFields(log.Fields{"type": consts.DuplicateObject, "block_id": qb.BlockID}).Error("queueBlock generated by myself")
			return nil
		}

		nodeHost, err := syspar.GetNodeHostByPosition(qb.FullNodeID)
		if err != nil {
			return err
		}

		host := utils.GetHostPort(nodeHost)
		// update our chain till maxBlockID from the host
		return UpdateChain(ctx, d, host, qb.BlockID)
	})
}
